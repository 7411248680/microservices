services:
  ## MySQL Docker Compose Config
  mysql:
    container_name: mysql
    image: mysql:8.0.28
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'mysql'
      MYSQL_ROOT_PASSWORD: 'mysql'
    ports:
      - 3316:3306
    expose:
      - 3316
    networks:
      - mysql
    volumes:
      - ./my-sql-data:/var/lib/mysql
      - ./sql-scripts/init.sql:/data/application/init.sql

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: p9ssw0rd
    ports:
      - 27018:27017
    expose:
      - 27018
    networks:
      - mongo
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - app

  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - 8181:8080
    volumes:
      - ./realms/realm-export.json:/opt/keycloak/data/import/realm.json:ro
    depends_on:
      - keycloak-mysql
    networks:
      - app

  ## Zookeeper Config
  zookeeper:
    image: zookeeper:3.7.1
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - app

  ## Kafka Config
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
    networks:
      - app

  ## Eureka Server
  discovery-server:
    image: saiupadhyayula007/discovery-server:v1
    container_name: discovery-server
    ports:
      - 8761:8761
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
    depends_on:
      - zipkin

  api-gateway:
    image: saiupadhyayula007/api-gateway:v1
    container_name: api-gateway
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: saiupadhyayula007/product-service:v1
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
      - mongo
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: saiupadhyayula007/order-service:v1
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
      - mysql
    depends_on:
      - mysql
      - kafka
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: saiupadhyayula007/inventory-service:v1
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
      - mysql
    depends_on:
      - mysql
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: saiupadhyayula007/notification-service:v1
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app
    depends_on:
      - zipkin
      - kafka
      - discovery-server
      - api-gateway

## Network Config
networks:
  mysql:
    driver: bridge
  mongo:
    driver: bridge
  app:
    driver: bridge
